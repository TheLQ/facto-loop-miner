function generate() {
    let css = generate_file(4);

    const body = document.getElementById("dynamic-style");
    body.innerHTML = css;

    let needle = document.getElementsByClassName("bp-grid4-004").item(0)
    console.log(`${needle.offsetLeft} ad ${needle.offsetTop}`)

    console.log(css)
}

addEventListener('load', generate);

function generate_file(depth) {
    let res = '/* Generated by egrid.gen.js */\n';

    let [beacon_count, parent_res] = generate_parent(2, 2, depth);
    res = res + generate_usage_comment(depth, beacon_count * 4)
    res = res + parent_res
    res = res + generate_children(depth)
    return res;
}

function generate_usage_comment(depth, beacon_count) {
    let res = "/*\n"

    for (let i = 0; i < beacon_count; i++) {
        res = res + `<div class='container ${grid_class_prefix(depth, i)}'></div>\n`
    }

    res = res + "*/\n"
    return res;
}

const BEACON_SIZE = 3;

function generate_parent(x, y, depth) {
    let width = depth * x
    let height = depth * y;
    let res = `
.bp-grid${depth}  {
    width: ${width * BEACON_SIZE}rem;
    height: ${height * BEACON_SIZE}rem;
    display: grid;
    grid-template-columns: repeat(${width}, 1fr);
    grid-template-rows: repeat(${height}, 1fr);
    grid-template-areas: `.trim();

    res = res + "\n";

    let counter = 0;
    for (let y = 1; y <= depth; y++) {
        res = res + '"';
        for (let x = 1; x <= depth; x++) {
            if (is_beacon_xy(x, y, depth)) {
                res = res + grid_area_name_normal(x, y, depth, counter++);
            } else {
                res = res + grid_area_name_center(depth);
            }
        }
        res = res + '"\n';
    }
    res = res + ';\n';
    res = res + '}\n';
    return [counter, res];
}

function generate_children(depth) {
    let counter = 0;
    let res = '';
    for (let y = 1; y <= depth; y++) {
        for (let x = 1; x <= depth; x++) {
            if (!is_beacon_xy(x, y, depth)) {
                continue
            }
            res = res + `
.${grid_class_prefix(depth, counter)} {
    grid-area: ${grid_area_name_normal(x, y, depth, counter)};
}`;
            counter++;

            // .${grid_class_prefix(depth, counter)}::before {
            //         content: 'b${x}x${y}';
            //     }
        }
    }
    return res;
}

function grid_area_name_normal(x, y, depth, counter) {
    return `grid${depth}-${pad_num(x, 3)}x${pad_num(y, 3)} `
}

function grid_area_name_center(depth) {
    return `grid${depth}-gcenter `
}

function grid_class_prefix(depth, counter) {
    return `bp-grid${depth}-${beacon_number(counter)}`
}

function is_beacon_xy(x, y, depth) {
    let is_solid_row = (y - 1) % (depth - 1) === 0;
    let is_middle_column = (x - 1) % (depth - 1) === 0;
    return is_solid_row || is_middle_column;
}

function beacon_number(counter) {
    return pad_num(counter, 3)
}

function pad_num(num, padding) {
    return `${num}`.padStart(padding, '0')
}

