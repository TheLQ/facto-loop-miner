

function generate() {
    let res = '/* Generated by egrid.gen.js */\n';
    res = res + generate_parent(4)
    res = res + generate_children(4)
    console.log(res)
}

function generate_parent(depth) {
    let res = `
.bp-grid${depth}  {
    width: 15em;
    height: 15em;
    grid-template-columns: repeat(${depth}, 1fr);
    grid-template-rows: repeat(${depth}, 1fr);
    grid-template-areas: `.trim();

    res = res + "\n";

    let counter = 0;
    for (let y = 1; y <= depth; y++) {
        res = res + '"';
        for (let x = 1; x <= depth; x++) {
            if (is_beacon_xy(x,y,depth)) {
                res = res + grid_area_name_normal(x,y,depth,counter++);
            } else {
                res = res + grid_area_name_center(depth);
            }
        }
        res = res + '"\n';
    }
    res = res + ';\n';
    res = res + '}\n';
    return res;
}

function generate_children(depth) {
    let counter = 0;
    let res = '';
    for (let y = 1; y <= depth; y++) {
    for (let x = 1; x <= depth; x++) {

            res = res + `
.bp-beacon-${depth}cube-${beacon_number(counter)} {
    grid-area: ${grid_area_name_normal(x,y,depth,counter)};
}
.bp-beacon-${depth}cube-${beacon_number(counter)}::before {
    content: 'beacon-${x}x${y}';
}`;
            counter++;
        }
    }
    return res;
}

function grid_area_name_normal(x,y,depth,counter) {
    return `grid${depth}-${pad_num(x, 3)}x${pad_num(y, 3)} `
}

function grid_area_name_center(depth) {
    return `grid${depth}-gcenter `
}

function is_beacon_xy(x,y, depth) {
    let is_solid_row = (y - 1) % (depth -1) === 0;
    let is_middle_column = (x - 1) % (depth-1) === 0;
    return is_solid_row || is_middle_column;
}

function beacon_number(counter) {
    return pad_num(counter, 3)
}

function pad_num(num, padding) {
    return `${num}`.padStart(padding, '0')
}

addEventListener('load', generate);
